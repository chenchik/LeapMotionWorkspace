package Synth;

import java.awt.GridLayout;
import java.io.IOException;

import javax.swing.*;

import com.leapmotion.leap.*;
import com.leapmotion.leap.Gesture.State;
import java.math.*;

import com.jsyn.JSyn;
import com.jsyn.Synthesizer;
import com.jsyn.swing.ExponentialRangeModel;
import com.jsyn.swing.JAppletFrame;
import com.jsyn.swing.PortControllerFactory;
import com.jsyn.swing.PortModelFactory;
import com.jsyn.swing.RotaryTextController;
import com.jsyn.unitgen.LineOut;
import com.jsyn.unitgen.LinearRamp;
import com.jsyn.unitgen.SawtoothOscillatorBL;
import com.jsyn.unitgen.UnitOscillator;
import com.leapmotion.leap.Controller;
import com.leapmotion.leap.Frame;
import com.leapmotion.leap.Gesture;
import com.leapmotion.leap.Hand;
import com.leapmotion.leap.Listener;
import com.leapmotion.leap.Vector;

/**
 * Play a tone using a JSyn oscillator and some knobs.
 * 
 * @author Phil Burk (C) 2010 Mobileer Inc
 * 
 */

class LeapListener extends Listener {
	SawFaders currentSynth;
	
	public LeapListener(SawFaders Synth) {
		this.currentSynth = Synth;
	}
	
	public void onInit(Controller controller){
		System.out.println("initialized");
	}
	public void onConnect(Controller controller){
		System.out.println("Connected to motion sensor");
		//where the gestures are picked up.
		controller.enableGesture(Gesture.Type.TYPE_SWIPE);
		controller.enableGesture(Gesture.Type.TYPE_CIRCLE);
		controller.enableGesture(Gesture.Type.TYPE_SCREEN_TAP);
		controller.enableGesture(Gesture.Type.TYPE_KEY_TAP);
	}
	public void onDisconnect(Controller controller){
		System.out.println("motion sensor disconnected");
		
	}
	public void onExit(Controller controller){
		System.out.println("exited");
	}
	public void onFrame(Controller controller){
		//it sends to our java program 
		Frame frame = controller.frame();
		//^^^this is the frame we are getting from the controller^^^^
		/*System.out.println("Frame id: " + frame.id() 
				+ "also timestamp: " + frame.timestamp()
				+ " number of hands: " + frame.hands().count()
				+ " number of fingers: " + frame.fingers().count()
				+ " number of tools: " + frame.tools().count()
				+ " number of gestures: " + frame.gestures().count());
		if(frame.hands().count() == 1){
			System.out.println("55");
		
		}*/
		for(Hand hand : frame.hands()){
			String handType = hand.isLeft() ? "left hand" : "right hand";
			System.out.println(handType + " " + " hand id: " + hand.id()
					+ "palm position" + hand.palmPosition()
					+ " x axis equals: " + hand.palmPosition().getX());
			
			currentSynth.osc.frequency.set(hand.palmPosition().getY()*1);
			currentSynth.osc.frequency.set
			
			Vector normal = hand.palmNormal();
			Vector direction = hand.direction();
			
		}
		
		
	}
}

public class SawFaders extends JApplet
{
	private static final long serialVersionUID = -2704222221111608377L;
	private Synthesizer synth;
	public UnitOscillator osc;
	private LinearRamp lag;
	private LineOut lineOut;

	public void init()
	{
		synth = JSyn.createSynthesizer();
		
		// Add a tone generator.
		synth.add( osc = new SawtoothOscillatorBL() );
		// Add a lag to smooth out amplitude changes and avoid pops.
		synth.add( lag = new LinearRamp() );
		// Add an output mixer.
		synth.add( lineOut = new LineOut() );
		// Connect the oscillator to the output.
		osc.output.connect( 0, lineOut.input, 0 );
		osc.output.connect( 0, lineOut.input, 1 );
		
		// Set the minimum, current and maximum values for the port.
		lag.output.connect( osc.amplitude );
		lag.input.setup( 0.0, 0.5, 1.0 );
		lag.time.set(  0.2 );

		// Arrange the faders in a stack.
		setLayout( new GridLayout( 0, 1 ) );

		ExponentialRangeModel amplitudeModel = PortModelFactory.createExponentialModel( lag.input );
		RotaryTextController knob = new RotaryTextController( amplitudeModel, 5 );
		JPanel knobPanel = new JPanel();
		knobPanel.add( knob );
		add( knobPanel );

		osc.frequency.setup( 50.0, 300.0, 10000.0 );
		add( PortControllerFactory.createExponentialPortSlider( osc.frequency ) );
		validate();
	}

	public void start()
	{
		// Start synthesizer using default stereo output at 44100 Hz.
		synth.start();
		// We only need to start the LineOut. It will pull data from the
		// oscillator.
		lineOut.start();
	}

	public void stop()
	{
		synth.stop();
	}
	

	/* Can be run as either an application or as an applet. */
	public static void main( String args[] )
	{
		

		System.out.println("press enter to quit");
		
		SawFaders applet = new SawFaders();
		JAppletFrame frame = new JAppletFrame( "test", applet );
		frame.setSize( 440, 200 );
		frame.setVisible( true );
		frame.test();
		
		LeapListener listener = new LeapListener(applet);
		Controller controller = new Controller();
		
		controller.addListener(listener);
		
		
		
		try{
			System.in.read();
		} catch(IOException e){
			e.printStackTrace();
		}
		
		controller.removeListener(listener);
		
	

	}

}